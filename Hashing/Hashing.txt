 1 2 1 3 2
    How many times does 1 appear?
 1 appears 2

 To count occurences take a counter variable and increment it whenever the element is found
  using for loop

 int f(number){
cnt=0;
for( i till arr length){
    if(arr[i]===number){
        cnt=cnt+1
    }
}

 }


Time Complexity:Big O(n)



Lets say number =10^5
Let array  be of size 10^5
No of operations =10^10

Note:10^8 ~ 1s
     10^10 ~ 100s




Hashing makes this faster
Hashing is prestoring /fetching 



Arrays can be used for hashing only upto 10 power 6 size

Hash maps are used  for bigger inputs

arr=[1,2,3,1,3,2]

map(key,value)
key=number
vaue=frequency





Hashing Methods
1.Division Methods
2.Mid Square Method
3.Folding Method


1.Division Method: arr[i]%10
{2,5,16,28,139,38,48,28,18}
 0->
 1->
 2-> 2%10=2
 3->
 4->
 5->5%10=5
 6->16%10=16 
 7->
 8->28->38->48
  |  ^
  v  |
  18-> 
 9->139


 It uses chaining method if a moduluous number is equal to other number they are chained using linked list in a sorting manner


 Worst Case: #Collision
              18,28,38,48,88,189.................

 Best Case:O(1)


Unordered map is most used


